import subprocess
from pathlib import Path

# base project root (one level up from utils/)
BASE_DIR = Path(__file__).resolve().parent

UI_DIR = BASE_DIR / "ui"                # gui/ui/ folder at project root
OUT_DIR = BASE_DIR / "generated"  # gui/generated/ folder
DIALOG_DIR = BASE_DIR / "dialogs" # gui/dialogs

OUT_DIR.mkdir(parents=True, exist_ok=True)


for ui_file in UI_DIR.glob("*.ui"):
    py_file = OUT_DIR / f"{ui_file.stem}.py"
    cmd = ["pyuic5", "-o", str(py_file), str(ui_file)]
    print("Converting:", ui_file.name, "->", py_file.name)
    subprocess.run(cmd, check=True)

    # auto generate the helper classes to seperate auto-generated from editing
    path_file = Path(DIALOG_DIR / f"{ui_file.stem}.py")
    if not path_file.is_file() and ui_file.stem.split("_")[-1]=="dialog":
        with open(path_file,'w') as f:
            f.write("from PyQt5 import QtWidgets\n")
            f.write(f"from generated.{ui_file.stem} import Ui_Dialog\n\n")
            f.write(f"class {ui_file.stem.replace("_", " ").title().replace(" ", "")}(QtWidgets.QDialog):\n")
            f.write("""    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)"""
                )
    # check if file has resource import and edit wronge import
    #generated by qt5 designer
    file_path = str(OUT_DIR / ui_file.name).replace(".ui", ".py")
    with open(file_path, "r") as file:
        lines = file.readlines()
    with open(file_path, "w") as file:
        for line in lines:
            if line.strip() == "import pic_rc":
                file.write("from ..resources import pic_rc\n")
            else:
                file.write(line)

